// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–π)
window.handleImageError = function() {
  const img = document.getElementById('catImg');
  const loadingSpinner = document.getElementById('loadingSpinner');
  const loadingText = document.getElementById('loadingText');
  
  if (img) {
    img.style.display = 'none';
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (loadingSpinner) loadingSpinner.style.display = 'none';
  if (loadingText) loadingText.style.display = 'none';
  
  const errorDiv = document.createElement('div');
  errorDiv.style.cssText = 'color: #e74c3c; margin-top: 20px; padding: 15px; background: #ffebee; border-radius: 12px; border: 2px solid #e74c3c; max-width: 420px; margin-left: auto; margin-right: auto;';
  errorDiv.innerHTML = 'üòø –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
  
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
  const existingError = document.querySelector('.image-error-message');
  if (existingError) existingError.remove();
  
  errorDiv.className = 'image-error-message';
  document.body.appendChild(errorDiv);
  
  // –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (errorDiv.parentNode) errorDiv.remove();
  }, 5000);
};

const showHistoryBtn = document.getElementById('showHistory');
const historyPanel = document.getElementById('historyPanel');
const historyList = document.getElementById('historyList');

showHistoryBtn.addEventListener('click', async () => {
  if (historyPanel.style.display === 'block') {
    historyPanel.style.display = 'none';
    showHistoryBtn.style.background = '#fff';
    showHistoryBtn.style.borderColor = '#bbb';
    showHistoryBtn.textContent = '–ò—Å—Ç–æ—Ä–∏—è';
    return;
  }
  historyPanel.style.display = 'block';
  showHistoryBtn.style.background = '#e0f7fa';
  showHistoryBtn.style.borderColor = '#2ec4b6';
  showHistoryBtn.textContent = '–°–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é';
  historyList.innerHTML = '<li>–ó–∞–≥—Ä—É–∑–∫–∞...</li>';
  const history = await fetch('/api/cat/history').then(r => r.json());
  const top = await fetch('/api/cat/top').then(r => r.json());
  historyList.innerHTML = '';

  // –ù–∞–π—Ç–∏ –ª–∏–¥–µ—Ä–∞ –ø–æ –ª–∞–π–∫–∞–º
  const leader = top.length > 0 ? top[0] : null;
  if (leader) {
    historyList.innerHTML += `<li style="margin-bottom:18px; border-bottom:2px solid #e67e22; padding-bottom:10px; background:#fffbe6;">
      <img src="${leader.url}" alt="cat" style="max-width:120px; max-height:80px; vertical-align:middle; border-radius:10px; margin-right:12px; border:2px solid #e67e22;">
      <span style="font-size:1.1em; font-weight:bold; color:#e67e22;">–õ–∏–¥–µ—Ä –ø–æ –ª–∞–π–∫–∞–º</span>
      <span style="margin-left:18px; color:#e74c3c; font-weight:bold;">‚ù§Ô∏è ${leader.likes}</span>
    </li>`;
  }

  // –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥–µ—Ä–∞)
  history.forEach(cat => {
    if (leader && cat.url === leader.url) return; // –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –ª–∏–¥–µ—Ä–∞
    const likes = (top.find(c => c.url === cat.url)?.likes) || 0;
    historyList.innerHTML += `<li style="margin-bottom:18px; border-bottom:1px solid #eee; padding-bottom:10px;">
      <img src="${cat.url}" alt="cat" style="max-width:120px; max-height:80px; vertical-align:middle; border-radius:10px; margin-right:12px;">
      <span style="font-size:1.1em;">–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${cat.shown}</span>
      <span style="margin-left:18px; color:#e74c3c;">‚ù§Ô∏è ${likes}</span>
    </li>`;
  });
});


let currentCatId = null;
let currentCatUrl = null;
let lastLoadedCatId = null; // id –∫–æ—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω

document.getElementById('showCat').addEventListener('click', async () => {
  const img = document.getElementById('catImg');
  const stats = document.getElementById('catStats');
  const showCatBtn = document.getElementById('showCat');
  const loadingSpinner = document.getElementById('loadingSpinner');
  const loadingText = document.getElementById('loadingText');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  img.style.display = 'none';
  stats.style.display = 'none';
  loadingSpinner.style.display = 'block';
  loadingText.style.display = 'block';
  showCatBtn.textContent = '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ç–∏–∫–∞...';
  showCatBtn.disabled = true;

  let loaded = false;
  try {
    const res = await fetch('/api/cat');
    const data = await res.json();

    if (data.error) {
      throw new Error(data.error);
    }

    if (data.url && data.id) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º src –∏ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      await new Promise((resolve, reject) => {
        let finished = false;
        const timeout = setTimeout(() => {
          if (!finished) {
            finished = true;
            reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
          }
        }, 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        img.onload = () => {
          if (!finished) {
            finished = true;
            clearTimeout(timeout);
            loaded = true;
            resolve();
          }
        };
        img.onerror = () => {
          if (!finished) {
            finished = true;
            clearTimeout(timeout);
            loaded = false;
            reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
          }
        };
        img.src = data.url;
      });

      if (loaded) {
        currentCatId = data.id;
        currentCatUrl = data.url;
        lastLoadedCatId = data.id;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        img.style.display = 'block';
        img.classList.add('cat-image-appear');
        stats.style.display = 'block';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const likeBtn = document.getElementById('likeBtn');
        if (likeBtn) {
          likeBtn.style.display = 'inline-block';
        }
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setTimeout(() => {
          img.classList.remove('cat-image-appear');
        }, 800);
        await updateStats(data.id, data.url);
      } else {
        // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º currentCatId, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞
        currentCatId = null;
        currentCatUrl = null;
        const likeBtn = document.getElementById('likeBtn');
        if (likeBtn) likeBtn.style.display = 'none';
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞');
      }
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏–∫–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞:', error);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    const errorDiv = document.createElement('div');
    errorDiv.style.cssText = 'color: #e74c3c; margin-top: 20px; padding: 15px; background: #ffebee; border-radius: 12px; border: 2px solid #e74c3c; max-width: 420px; margin-left: auto; margin-right: auto;';
    errorDiv.innerHTML = 'üòø –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const existingError = document.querySelector('.error-message');
    if (existingError) existingError.remove();
    errorDiv.className = 'error-message';
    document.body.appendChild(errorDiv);
    // –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (errorDiv.parentNode) errorDiv.remove();
    }, 5000);
  } finally {
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loadingSpinner.style.display = 'none';
    loadingText.style.display = 'none';
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    showCatBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ç–∏–∫–∞';
    showCatBtn.disabled = false;
  }
});

async function updateStats(id, url) {
  try {
    console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ—Ç–∏–∫–∞ ${id}...`);
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—Ç–∏–∫—É
    const res = await fetch(`/api/cat/${id}`);
    let views = 0, likes = 0;
    if (res.ok) {
      const cat = await res.json();
      if (cat && typeof cat.shown === 'number') views = cat.shown;
      if (cat && typeof cat.likes === 'number') likes = cat.likes;
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ /api/cat/${id}: –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤=${views}, –ª–∞–π–∫–æ–≤=${likes}`);
    } else {
      console.log(`‚ùå –ö–æ—Ç–∏–∫ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ /api/cat/${id}`);
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const viewsElement = document.getElementById('views');
    const likesElement = document.getElementById('likes');
    if (viewsElement) {
      viewsElement.textContent = `–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${views}`;
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${views}`);
    }
    if (likesElement) {
      likesElement.textContent = `–õ–∞–π–∫–æ–≤: ${likes}`;
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤: ${likes}`);
    }
    console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ—Ç–∏–∫–∞ ${id}: –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤=${views}, –ª–∞–π–∫–æ–≤=${likes}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

document.getElementById('likeBtn').addEventListener('click', async () => {
  if (!currentCatId) {
    alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–∏—Ç–µ –∫–æ—Ç–∏–∫–∞!');
    return;
  }
  // –ù–µ –¥–∞—ë–º –ª–∞–π–∫–∞—Ç—å, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
  if (lastLoadedCatId !== currentCatId) {
    alert('–°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ç–∏–∫–∞!');
    return;
  }
  
  const likeBtn = document.getElementById('likeBtn');
  const likesElement = document.getElementById('likes');
  
  // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å—Ä–∞–∑—É
  likeBtn.textContent = '‚ù§Ô∏è –õ–∞–π–∫!';
  likeBtn.style.background = '#ffebee';
  likeBtn.style.borderColor = '#e74c3c';
  likeBtn.disabled = true;
  likeBtn.classList.add('like-pulse');
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫
    const response = await fetch(`/api/cat/${currentCatId}/like`, {
      method: 'POST'
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await updateStats(currentCatId, currentCatUrl);
    
    console.log(`–õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ—Ç–∏–∫–∞ ${currentCatId}`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ:', error);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∞–π–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      likeBtn.textContent = '‚ù§Ô∏è –õ–∞–π–∫';
      likeBtn.style.background = '#fff';
      likeBtn.style.borderColor = '#bbb';
      likeBtn.disabled = false;
      likeBtn.classList.remove('like-pulse');
    }, 1000);
  }
});
